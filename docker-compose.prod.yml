version: "3.9"

x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "5"

services:
  backend:
    image: ${BACKEND_IMAGE:-ghcr.io/lumi/backend:latest}
    restart: unless-stopped
    env_file:
      - env/.env.docker
    environment:
      NODE_ENV: production
      PORT: 4000
      DATABASE_URL: ${DATABASE_URL:?set DATABASE_URL before deploying}
      REDIS_URL: ${REDIS_URL:?set REDIS_URL before deploying}
      API_BASE_URL: ${API_BASE_URL:-https://api.lumi.local}
      FRONTEND_URL: ${FRONTEND_URL:-https://lumi.local}
      LOG_LEVEL: info
    ports:
      - "4000:4000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'node -e "const net=require(''net'');const socket=net.connect({host:''127.0.0.1'',port:process.env.PORT||4000},()=>{socket.end();process.exit(0);});socket.on(''error'',()=>process.exit(1));"',
        ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 30s
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: "1.50"
          memory: 768M

  frontend:
    image: ${FRONTEND_IMAGE:-ghcr.io/lumi/frontend:latest}
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      API_BASE_URL: ${API_BASE_URL:-https://api.lumi.local}
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'node -e "const net=require(''net'');const port=parseInt(process.env.PORT||''3000'',10);const socket=net.connect({host:''127.0.0.1'',port},()=>{socket.end();process.exit(0);});socket.on(''error'',()=>process.exit(1));"',
        ]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 45s
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: "2.00"
          memory: 1G

  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-lumi}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:?set POSTGRES_PASSWORD before deploying}
      POSTGRES_DB: ${POSTGRES_DB:-lumi}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-lumi} -d ${POSTGRES_DB:-lumi}"]
      interval: 30s
      timeout: 5s
      retries: 5
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: "1.00"
          memory: 1G

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command:
      - "redis-server"
      - "--appendonly"
      - "yes"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 20s
      timeout: 5s
      retries: 5
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 256M

  prometheus:
    image: prom/prometheus:v2.51.0
    restart: unless-stopped
    volumes:
      - ./ops/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    healthcheck:
      test: ["CMD-SHELL", "wget --spider --quiet http://localhost:9090/-/healthy || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    logging: *default-logging
    deploy:
      resources:
        limits:
          cpus: "0.50"
          memory: 512M

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
