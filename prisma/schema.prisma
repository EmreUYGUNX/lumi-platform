/// Prisma schema for the Lumi commerce platform data layer.
/// Phase 2 - Database & Prisma ORM (Foundation)

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
  binaryTargets   = ["native", "debian-openssl-3.0.x", "linux-musl"]
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../docs/backend/database/er-diagram.png"
  format   = "png"
  theme    = "neutral"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
  // Connection pooling is configured in PrismaClient options (apps/backend/src/lib/prisma.ts)
}

// ─────────────────────────────────────────────────────────────────────────────
//  Enumerations

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

enum ProductStatus {
  DRAFT
  ACTIVE
  ARCHIVED
}

enum InventoryPolicy {
  TRACK
  CONTINUE
  DENY
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}

enum MediaProvider {
  CLOUDINARY
  S3
}

enum CartStatus {
  ACTIVE
  CHECKED_OUT
  ABANDONED
}

enum OrderStatus {
  PENDING
  PAID
  FULFILLED
  SHIPPED
  DELIVERED
  CANCELLED
}

enum PaymentProvider {
  IYZICO
  STRIPE
  PAYPAL
  MANUAL
}

enum PaymentStatus {
  INITIATED
  AUTHORIZED
  SETTLED
  FAILED
  REFUNDED
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum CouponType {
  PERCENTAGE
  FIXED_AMOUNT
  FREE_SHIPPING
}

// ─────────────────────────────────────────────────────────────────────────────
//  Core Domain Models

model User {
  id               String     @id @default(cuid())
  email            String     @unique
  passwordHash     String
  firstName        String?
  lastName         String?
  phone            String?
  emailVerified    Boolean    @default(false)
  emailVerifiedAt  DateTime?
  failedLoginCount Int        @default(0)
  lockoutUntil     DateTime?
  twoFactorSecret  String?
  twoFactorEnabled Boolean    @default(false)
  status           UserStatus @default(ACTIVE)
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  sessions       UserSession[]
  roles          UserRole[]
  permissions    UserPermission[]
  securityEvents SecurityEvent[]
  carts          Cart[]
  orders         Order[]
  addresses      Address[]
  reviews        Review[]
  savedCards     SavedCard[]
  payments       Payment[]
  auditLogs      AuditLog[]
  couponUsages   CouponUsage[]
}

model UserSession {
  id               String    @id @default(cuid())
  userId           String
  refreshTokenHash String
  fingerprint      String?
  ipAddress        String?
  userAgent        String?
  expiresAt        DateTime
  revokedAt        DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@index([expiresAt, revokedAt])
}

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
  userRoles       UserRole[]
}

model Permission {
  id          String   @id @default(cuid())
  key         String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rolePermissions RolePermission[]
  userPermissions UserPermission[]
}

model RolePermission {
  roleId       String
  permissionId String
  assignedAt   DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model UserRole {
  userId     String
  roleId     String
  assignedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@index([userId])
  @@index([roleId])
}

model UserPermission {
  userId       String
  permissionId String
  assignedAt   DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([userId, permissionId])
}

model SecurityEvent {
  id        String   @id @default(cuid())
  userId    String?
  type      String
  ipAddress String?
  userAgent String?
  payload   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([type])
}

model Product {
  id              String          @id @default(cuid())
  title           String
  slug            String
  sku             String?         @unique
  description     String?
  summary         String?
  status          ProductStatus   @default(DRAFT)
  price           Decimal         @db.Decimal(12, 2)
  compareAtPrice  Decimal?        @db.Decimal(12, 2)
  currency        String          @default("TRY")
  inventoryPolicy InventoryPolicy @default(TRACK)
  searchKeywords  String[]        @default([])
  attributes      Json?
  deletedAt       DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  variants     ProductVariant[]
  categories   ProductCategory[]
  collections  ProductCollection[]
  productMedia ProductMedia[]
  reviews      Review[]
  orderItems   OrderItem[]

  @@unique([slug])
  @@index([status, createdAt])
  @@index([deletedAt])
  @@index([searchKeywords], type: Gin)
}

model ProductVariant {
  id             String   @id @default(cuid())
  productId      String
  title          String
  sku            String   @unique
  price          Decimal  @db.Decimal(12, 2)
  compareAtPrice Decimal? @db.Decimal(12, 2)
  stock          Int      @default(0)
  attributes     Json?
  weightGrams    Int?
  isPrimary      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  product      Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory    Inventory?
  cartItems    CartItem[]
  variantMedia VariantMedia[]
  orderItems   OrderItem[]

  @@index([productId])
}

model Category {
  id           String   @id @default(cuid())
  name         String
  slug         String
  description  String?
  parentId     String?
  level        Int      @default(0)
  path         String
  imageUrl     String?
  iconUrl      String?
  displayOrder Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  parent   Category?         @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[]        @relation("CategoryHierarchy")
  products ProductCategory[]

  @@unique([slug])
  @@index([parentId])
  @@index([slug])
}

model ProductCategory {
  productId  String
  categoryId String
  isPrimary  Boolean  @default(false)
  assignedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Restrict)

  @@id([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}

model Collection {
  id           String   @id @default(cuid())
  name         String
  slug         String
  description  String?
  imageUrl     String?
  status       String   @default("DRAFT")
  displayOrder Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  products ProductCollection[]

  @@unique([slug])
}

model ProductCollection {
  productId    String
  collectionId String
  displayOrder Int?
  assignedAt   DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  product    Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  collection Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@id([productId, collectionId])
  @@index([collectionId])
}

model Inventory {
  id                String   @id @default(cuid())
  productVariantId  String
  quantityAvailable Int      @default(0)
  quantityReserved  Int      @default(0)
  quantityOnHand    Int      @default(0)
  lowStockThreshold Int?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Cascade)

  @@unique([productVariantId])
}

model Media {
  id        String        @id @default(cuid())
  assetId   String        @unique
  url       String
  type      MediaType
  provider  MediaProvider
  mimeType  String
  sizeBytes Int
  width     Int?
  height    Int?
  alt       String?
  caption   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  productMedia ProductMedia[]
  variantMedia VariantMedia[]
  reviewMedia  ReviewMedia[]

  @@index([assetId])
}

model ProductMedia {
  productId  String
  mediaId    String
  sortOrder  Int?
  isPrimary  Boolean  @default(false)
  assignedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  media   Media   @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([productId, mediaId])
  @@index([mediaId])
}

model VariantMedia {
  variantId  String
  mediaId    String
  sortOrder  Int?
  isPrimary  Boolean  @default(false)
  assignedAt DateTime @default(now())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  variant ProductVariant @relation(fields: [variantId], references: [id], onDelete: Cascade)
  media   Media          @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([variantId, mediaId])
  @@index([mediaId])
}

model Cart {
  id        String     @id @default(cuid())
  userId    String?
  sessionId String?
  status    CartStatus @default(ACTIVE)
  expiresAt DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  user  User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  items CartItem[]
  order Order?     @relation("CartOrder")

  @@index([userId])
  @@index([sessionId])
  @@index([status, updatedAt])
}

model CartItem {
  id               String   @id @default(cuid())
  cartId           String
  productVariantId String
  quantity         Int      @default(1)
  unitPrice        Decimal  @db.Decimal(12, 2)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  cart           Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Restrict)

  @@unique([cartId, productVariantId])
  @@index([cartId])
  @@index([productVariantId])
}

model Address {
  id         String   @id @default(cuid())
  userId     String
  label      String
  fullName   String
  phone      String?
  line1      String
  line2      String?
  city       String
  state      String?
  postalCode String
  country    String
  isDefault  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  shippingOrders Order[] @relation("OrderShippingAddress")
  billingOrders  Order[] @relation("OrderBillingAddress")

  @@index([userId])
}

model Order {
  id                String      @id @default(cuid())
  reference         String      @unique
  userId            String?
  cartId            String?     @unique
  status            OrderStatus @default(PENDING)
  totalAmount       Decimal     @db.Decimal(14, 2)
  subtotalAmount    Decimal     @db.Decimal(14, 2)
  taxAmount         Decimal     @db.Decimal(14, 2)
  discountAmount    Decimal     @db.Decimal(14, 2)
  currency          String      @default("TRY")
  shippingAddressId String?
  billingAddressId  String?
  placedAt          DateTime?
  fulfilledAt       DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  cancelledAt       DateTime?
  notes             String?     @db.Text
  metadata          Json?
  version           Int         @default(1)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  user            User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  cart            Cart?         @relation("CartOrder", fields: [cartId], references: [id], onDelete: SetNull)
  shippingAddress Address?      @relation("OrderShippingAddress", fields: [shippingAddressId], references: [id], onDelete: SetNull)
  billingAddress  Address?      @relation("OrderBillingAddress", fields: [billingAddressId], references: [id], onDelete: SetNull)
  items           OrderItem[]
  payments        Payment[]
  couponUsages    CouponUsage[]
  reviews         Review[]

  @@index([userId])
  @@index([status, createdAt])
  @@index([userId, status, createdAt])
}

model OrderItem {
  id               String   @id @default(cuid())
  orderId          String
  productId        String
  productVariantId String
  quantity         Int      @default(1)
  unitPrice        Decimal  @db.Decimal(12, 2)
  currency         String   @default("TRY")
  titleSnapshot    String
  variantSnapshot  Json?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  order          Order          @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product        Product        @relation(fields: [productId], references: [id], onDelete: Restrict)
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id], onDelete: Restrict)

  @@index([orderId])
  @@index([productId])
  @@index([productVariantId])
}

model Payment {
  id                 String          @id @default(cuid())
  orderId            String
  userId             String?
  provider           PaymentProvider
  status             PaymentStatus   @default(INITIATED)
  transactionId      String          @unique
  conversationId     String?
  amount             Decimal         @db.Decimal(14, 2)
  paidPrice          Decimal?        @db.Decimal(14, 2)
  currency           String          @default("TRY")
  installment        Int?
  paymentChannel     String?
  paymentGroup       String?
  cardToken          String?
  cardAssociation    String?
  cardFamily         String?
  cardType           String?
  cardBankName       String?
  cardHolderName     String?
  binNumber          String?
  lastFourDigits     String?
  threeDSHtmlContent String?         @db.Text
  ipAddress          String?
  deviceId           String?
  fraudScore         Float?
  riskFlags          Json?
  authorizedAt       DateTime?
  settledAt          DateTime?
  failedAt           DateTime?
  failureReason      String?
  failureCode        String?
  rawPayload         Json?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt

  order   Order           @relation(fields: [orderId], references: [id], onDelete: Restrict)
  user    User?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  refunds PaymentRefund[]

  @@index([orderId])
  @@index([userId])
}

model SavedCard {
  id              String   @id @default(cuid())
  userId          String
  cardToken       String   @unique
  cardAlias       String?
  binNumber       String?
  lastFourDigits  String
  cardType        String?
  cardAssociation String?
  cardFamily      String?
  cardBankName    String?
  cardHolderName  String?
  expiryMonth     Int
  expiryYear      Int
  isDefault       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model PaymentRefund {
  id            String    @id @default(cuid())
  paymentId     String
  amount        Decimal   @db.Decimal(14, 2)
  currency      String    @default("TRY")
  reason        String?
  status        String
  refundId      String?
  processedAt   DateTime?
  failureReason String?
  metadata      Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  payment Payment @relation(fields: [paymentId], references: [id], onDelete: Cascade)

  @@index([paymentId])
}

model Review {
  id                 String       @id @default(cuid())
  productId          String
  userId             String
  orderId            String?
  rating             Int
  title              String
  content            String?      @db.Text
  isVerifiedPurchase Boolean      @default(false)
  status             ReviewStatus @default(PENDING)
  helpfulCount       Int          @default(0)
  notHelpfulCount    Int          @default(0)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  product Product       @relation(fields: [productId], references: [id], onDelete: Cascade)
  user    User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  order   Order?        @relation(fields: [orderId], references: [id], onDelete: SetNull)
  media   ReviewMedia[]

  @@unique([productId, userId])
  @@index([productId, status])
  @@index([userId])
  @@index([orderId])
}

model ReviewMedia {
  reviewId  String
  mediaId   String
  sortOrder Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  media  Media  @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([reviewId, mediaId])
  @@index([mediaId])
}

model Coupon {
  id                String     @id @default(cuid())
  code              String
  description       String?
  type              CouponType
  value             Decimal    @db.Decimal(12, 2)
  minOrderAmount    Decimal?   @db.Decimal(12, 2)
  maxDiscountAmount Decimal?   @db.Decimal(12, 2)
  usageLimit        Int?
  usageCount        Int        @default(0)
  startsAt          DateTime?
  expiresAt         DateTime?
  isActive          Boolean    @default(false)
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt

  usages CouponUsage[]

  @@unique([code])
  @@index([code])
}

model CouponUsage {
  id             String   @id @default(cuid())
  couponId       String
  userId         String
  orderId        String
  discountAmount Decimal  @db.Decimal(12, 2)
  usedAt         DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  coupon Coupon @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([couponId])
  @@index([userId])
  @@index([orderId])
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  actorType String
  action    String
  entity    String
  entityId  String
  before    Json?
  after     Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@index([entity, entityId])
  @@index([entity, entityId, createdAt])
  @@index([createdAt])
}
